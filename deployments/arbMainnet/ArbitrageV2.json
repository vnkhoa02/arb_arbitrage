{
  "address": "0x161Ebd31B732A79aD8926849ED0cCE91A01ef8A2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "name": "ArbitrageCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        }
      ],
      "name": "ArbitrageStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "forwardPaths",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "arbitrageDexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe8322d2f7e41e706affb1ad230644c8509cec554c6e96e8439a4191620190580",
  "receipt": {
    "to": null,
    "from": "0x0CF9Dcf86Ec3A20BF54E852E99823f2978552ED1",
    "contractAddress": "0x161Ebd31B732A79aD8926849ED0cCE91A01ef8A2",
    "transactionIndex": 1,
    "gasUsed": "3026501",
    "logsBloom": "0x
    "blockHash": "0xbbee776752a6ac383d473c3250c35d309a815e7c96ee571a6b5b304aecf6cb9c",
    "transactionHash": "0xe8322d2f7e41e706affb1ad230644c8509cec554c6e96e8439a4191620190580",
    "logs": [],
    "blockNumber": 331751346,
    "cumulativeGasUsed": "3026501",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9cd05d547addc2cb9a3aebd22eb27009",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ArbitrageCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"}],\"name\":\"ArbitrageStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"forwardPaths\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"arbitrageDexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ArbitrageCompleted(address,address,uint256,uint256)\":{\"notice\":\"Emitted when an arbitrage completes successfully\"},\"ArbitrageStarted(address,address,uint256)\":{\"notice\":\"Emitted when an arbitrage is initiated\"}},\"kind\":\"user\",\"methods\":{\"arbitrageDexes(bytes[],address,address,uint256)\":{\"notice\":\"Perform arbitrage between Uniswap V3 and PancakeSwap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arbitrum/ArbitrageV2.sol\":\"ArbitrageV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/FlashLoanProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@balancer-labs/v2-interfaces/contracts/vault/IVault.sol';\\nimport '@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol';\\n\\n/**\\n * @title FlashLoanProvider\\n * @dev Abstract contract that handles Balancer V2 flash loans\\n */\\nabstract contract FlashLoanProvider is IFlashLoanRecipient, ReentrancyGuard {\\n    address public owner;\\n\\n    address constant VAULT_ADDRESS = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    IVault internal constant vault = IVault(VAULT_ADDRESS);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'Not owner');\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function makeFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) internal {\\n        vault.flashLoan(this, tokens, amounts, userData);\\n    }\\n\\n    function flashLoan(\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) internal {\\n        // Convert address[] to IERC20[]\\n        IERC20[] memory tokensI = new IERC20[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokensI[i] = IERC20(tokens[i]);\\n        }\\n        // Call the vault's flash loan function\\n        makeFlashLoan(tokensI, amounts, userData);\\n    }\\n\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external override {\\n        require(msg.sender == address(vault), 'FlashLoanProvider: Not vault');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _executeOperation(\\n                address(tokens[i]),\\n                amounts[i],\\n                feeAmounts[i],\\n                userData\\n            );\\n            uint256 totalDebt = amounts[i] + feeAmounts[i];\\n            tokens[i].transfer(address(vault), totalDebt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook for executing custom logic. Must be overridden.\\n     */\\n    function _executeOperation(\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes memory userData\\n    ) internal virtual;\\n\\n    function withdrawToken(address token) external onlyOwner {\\n        uint256 bal = IERC20(token).balanceOf(address(this));\\n        require(bal > 0, 'No token balance');\\n        IERC20(token).transfer(owner, bal);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa40990811cade95df102811fe6532419b2b9482b00b90430f8d2c639f2450e3b\",\"license\":\"UNLICENSED\"},\"contracts/arbitrum/ArbitrageV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport {FlashLoanProvider} from '../FlashLoanProvider.sol';\\n\\ncontract ArbitrageV2 is FlashLoanProvider {\\n    ISwapRouter private constant swapRouter =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    ISwapRouter private constant pancakeRouter =\\n        ISwapRouter(0x1b81D678ffb9C0263b24A97847620C99d213eB14);\\n\\n    /// @notice Emitted when an arbitrage is initiated\\n    event ArbitrageStarted(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountBorrowed\\n    );\\n\\n    /// @notice Emitted when an arbitrage completes successfully\\n    event ArbitrageCompleted(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountBorrowed,\\n        uint256 profit\\n    );\\n\\n    /// @notice Perform arbitrage between Uniswap V3 and PancakeSwap\\n    function arbitrageDexes(\\n        bytes[] calldata forwardPaths,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 borrowAmount\\n    ) external onlyOwner {\\n        require(borrowAmount > 0, 'Amount must be > 0');\\n\\n        emit ArbitrageStarted(tokenIn, tokenOut, borrowAmount);\\n\\n        // Prepare flash loan\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = tokenIn;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = borrowAmount;\\n        bytes memory data = abi.encode(tokenOut, forwardPaths);\\n\\n        flashLoan(tokens, amounts, data);\\n    }\\n\\n    /// @dev FlashLoanProvider callback\\n    function _executeOperation(\\n        address borrowedToken,\\n        uint256 amountBorrowed,\\n        uint256,\\n        bytes memory userData\\n    ) internal override nonReentrant {\\n        (address tokenOut, bytes[] memory forwardPaths) = abi.decode(\\n            userData,\\n            (address, bytes[])\\n        );\\n\\n        // 1. Swap on Uniswap V3\\n        uint256 amountOut0 = swapUni(forwardPaths, borrowedToken);\\n\\n        // 2. Swap back on PancakeSwap\\n        uint256 amountOut1 = swapPancake(tokenOut, borrowedToken, amountOut0);\\n\\n        // 3. Ensure profitability\\n        require(amountOut1 > amountBorrowed, 'Arbitrage not profitable');\\n\\n        // 4. Calculate profit and transfer to owner\\n        uint256 profit = amountOut1 - amountBorrowed;\\n        TransferHelper.safeTransfer(borrowedToken, owner, profit);\\n\\n        emit ArbitrageCompleted(\\n            borrowedToken,\\n            tokenOut,\\n            amountBorrowed,\\n            profit\\n        );\\n    }\\n\\n    /// @dev Executes exact-input swaps on Uniswap V3\\n    function swapUni(\\n        bytes[] memory forwardPaths,\\n        address tokenIn\\n    ) internal returns (uint256 outAmount) {\\n        for (uint256 i = 0; i < forwardPaths.length; ) {\\n            (uint256 amountIn, bytes memory path) = abi.decode(\\n                forwardPaths[i],\\n                (uint256, bytes)\\n            );\\n\\n            // Reset and set approval\\n            TransferHelper.safeApprove(tokenIn, address(swapRouter), 0);\\n            TransferHelper.safeApprove(tokenIn, address(swapRouter), amountIn);\\n\\n            outAmount += swapRouter.exactInput(\\n                ISwapRouter.ExactInputParams({\\n                    path: path,\\n                    recipient: address(this),\\n                    deadline: block.timestamp + 1 minutes,\\n                    amountIn: amountIn,\\n                    amountOutMinimum: 0\\n                })\\n            );\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes an exact-input single swap on PancakeSwap\\n    function swapPancake(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Reset and set approval\\n        TransferHelper.safeApprove(tokenIn, address(pancakeRouter), 0);\\n        TransferHelper.safeApprove(tokenIn, address(pancakeRouter), amountIn);\\n\\n        amountOut = pancakeRouter.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: 500,\\n                recipient: address(this),\\n                deadline: block.timestamp + 1 minutes,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfa2c0b94ee56fe7be1b3f97868745566b6053cbb10a22fb46ba36941ee1e23c3\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612441806100686000396000f3fe6080604052600436106100435760003560e01c80635785319d1461004f57806389476069146100785780638da5cb5b146100a1578063f04f2707146100cc5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611135565b6100f5565b005b34801561008457600080fd5b5061009f600480360381019061009a91906111bd565b610376565b005b3480156100ad57600080fd5b506100b661056c565b6040516100c391906111f9565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190611519565b610592565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017c9061164d565b60405180910390fd5b600081116101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf906116b9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f19d7ac84096fd884c7ff689fa448c14cc2b828df6c74eff60c4173de059fea468360405161022591906116e8565b60405180910390a36000600167ffffffffffffffff81111561024a57610249611225565b5b6040519080825280602002602001820160405280156102785781602001602082028036833780820191505090505b50905083816000815181106102905761028f611703565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156102e7576102e6611225565b5b6040519080825280602002602001820160405280156103155781602001602082028036833780820191505090505b509050828160008151811061032d5761032c611703565b5b602002602001018181525050600084888860405160200161035093929190611896565b604051602081830303815290604052905061036c838383610780565b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd9061164d565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161044191906111f9565b602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048291906118dd565b9050600081116104c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104be90611956565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610524929190611976565b6020604051808303816000875af1158015610543573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056791906119d7565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90611a50565b60405180910390fd5b60005b84518110156107795761067a85828151811061063657610635611703565b5b602002602001015185838151811061065157610650611703565b5b602002602001015185848151811061066c5761066b611703565b5b602002602001015185610861565b600083828151811061068f5761068e611703565b5b60200260200101518583815181106106aa576106a9611703565b5b60200260200101516106bc9190611a9f565b90508582815181106106d1576106d0611703565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8836040518363ffffffff1660e01b8152600401610727929190611976565b6020604051808303816000875af1158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a91906119d7565b50508080600101915050610617565b5050505050565b6000835167ffffffffffffffff81111561079d5761079c611225565b5b6040519080825280602002602001820160405280156107cb5781602001602082028036833780820191505090505b50905060005b845181101561084f578481815181106107ed576107ec611703565b5b602002602001015182828151811061080857610807611703565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506107d1565b5061085b81848461099a565b50505050565b610869610a24565b600080828060200190518101906108809190611c8c565b9150915060006108908288610a73565b9050600061089f848984610bf4565b90508681116108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90611d34565b60405180910390fd5b600087826108f19190611d54565b905061092089600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610d74565b8473ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f904ae207ac2ad187558223683996c4334fd731418301729349e3cbbad5cb9f588a8460405161097f929190611d88565b60405180910390a35050505050610994610ec9565b50505050565b73ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff16635c38449e308585856040518563ffffffff1660e01b81526004016109ed9493929190611ff3565b600060405180830381600087803b158015610a0757600080fd5b505af1158015610a1b573d6000803e3d6000fd5b50505050505050565b600260005403610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090612099565b60405180910390fd5b6002600081905550565b600080600090505b8351811015610bed57600080858381518110610a9a57610a99611703565b5b6020026020010151806020019051810190610ab591906120b9565b91509150610ad98573e592427a0aece92de3edee1f18e0157c058615646000610ed3565b610af88573e592427a0aece92de3edee1f18e0157c0586156484610ed3565b73e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663c04b8d596040518060a001604052808481526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603c42610b629190611a9f565b815260200185815260200160008152506040518263ffffffff1660e01b8152600401610b8e91906121d3565b6020604051808303816000875af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd191906118dd565b84610bdc9190611a9f565b935082806001019350505050610a7b565b5092915050565b6000610c1684731b81d678ffb9c0263b24a97847620c99d213eb146000610ed3565b610c3584731b81d678ffb9c0263b24a97847620c99d213eb1484610ed3565b731b81d678ffb9c0263b24a97847620c99d213eb1473ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016101f462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603c42610cdf9190611a9f565b815260200185815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610d2891906122c4565b6020604051808303816000875af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b91906118dd565b90509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610da9929190611976565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e13919061231c565b6000604051808303816000865af19150503d8060008114610e50576040519150601f19603f3d011682016040523d82523d6000602084013e610e55565b606091505b5091509150818015610e835750600081511480610e82575080806020019051810190610e8191906119d7565b5b5b610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb99061237f565b60405180910390fd5b5050505050565b6001600081905550565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610f08929190611976565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f72919061231c565b6000604051808303816000865af19150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fe25750600081511480610fe1575080806020019051810190610fe091906119d7565b5b5b611021576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611018906123eb565b60405180910390fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126110615761106061103c565b5b8235905067ffffffffffffffff81111561107e5761107d611041565b5b60208301915083602082028301111561109a57611099611046565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110cc826110a1565b9050919050565b6110dc816110c1565b81146110e757600080fd5b50565b6000813590506110f9816110d3565b92915050565b6000819050919050565b611112816110ff565b811461111d57600080fd5b50565b60008135905061112f81611109565b92915050565b60008060008060006080868803121561115157611150611032565b5b600086013567ffffffffffffffff81111561116f5761116e611037565b5b61117b8882890161104b565b9550955050602061118e888289016110ea565b935050604061119f888289016110ea565b92505060606111b088828901611120565b9150509295509295909350565b6000602082840312156111d3576111d2611032565b5b60006111e1848285016110ea565b91505092915050565b6111f3816110c1565b82525050565b600060208201905061120e60008301846111ea565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61125d82611214565b810181811067ffffffffffffffff8211171561127c5761127b611225565b5b80604052505050565b600061128f611028565b905061129b8282611254565b919050565b600067ffffffffffffffff8211156112bb576112ba611225565b5b602082029050602081019050919050565b60006112d7826110c1565b9050919050565b6112e7816112cc565b81146112f257600080fd5b50565b600081359050611304816112de565b92915050565b600061131d611318846112a0565b611285565b905080838252602082019050602084028301858111156113405761133f611046565b5b835b81811015611369578061135588826112f5565b845260208401935050602081019050611342565b5050509392505050565b600082601f8301126113885761138761103c565b5b813561139884826020860161130a565b91505092915050565b600067ffffffffffffffff8211156113bc576113bb611225565b5b602082029050602081019050919050565b60006113e06113db846113a1565b611285565b9050808382526020820190506020840283018581111561140357611402611046565b5b835b8181101561142c57806114188882611120565b845260208401935050602081019050611405565b5050509392505050565b600082601f83011261144b5761144a61103c565b5b813561145b8482602086016113cd565b91505092915050565b600080fd5b600067ffffffffffffffff82111561148457611483611225565b5b61148d82611214565b9050602081019050919050565b82818337600083830152505050565b60006114bc6114b784611469565b611285565b9050828152602081018484840111156114d8576114d7611464565b5b6114e384828561149a565b509392505050565b600082601f830112611500576114ff61103c565b5b81356115108482602086016114a9565b91505092915050565b6000806000806080858703121561153357611532611032565b5b600085013567ffffffffffffffff81111561155157611550611037565b5b61155d87828801611373565b945050602085013567ffffffffffffffff81111561157e5761157d611037565b5b61158a87828801611436565b935050604085013567ffffffffffffffff8111156115ab576115aa611037565b5b6115b787828801611436565b925050606085013567ffffffffffffffff8111156115d8576115d7611037565b5b6115e4878288016114eb565b91505092959194509250565b600082825260208201905092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006116376009836115f0565b915061164282611601565b602082019050919050565b600060208201905081810360008301526116668161162a565b9050919050565b7f416d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b60006116a36012836115f0565b91506116ae8261166d565b602082019050919050565b600060208201905081810360008301526116d281611696565b9050919050565b6116e2816110ff565b82525050565b60006020820190506116fd60008301846116d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b600061176a838561174d565b935061177783858461149a565b61178083611214565b840190509392505050565b600061179884848461175e565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117cd576117cc6117ab565b5b83810192508235915060208301925067ffffffffffffffff8211156117f5576117f46117a1565b5b60018202360383131561180b5761180a6117a6565b5b509250929050565b6000602082019050919050565b600061182c8385611732565b93508360208402850161183e84611743565b8060005b8781101561188457848403895261185982846117b0565b61186486828461178b565b955061186f84611813565b935060208b019a505050600181019050611842565b50829750879450505050509392505050565b60006040820190506118ab60008301866111ea565b81810360208301526118be818486611820565b9050949350505050565b6000815190506118d781611109565b92915050565b6000602082840312156118f3576118f2611032565b5b6000611901848285016118c8565b91505092915050565b7f4e6f20746f6b656e2062616c616e636500000000000000000000000000000000600082015250565b60006119406010836115f0565b915061194b8261190a565b602082019050919050565b6000602082019050818103600083015261196f81611933565b9050919050565b600060408201905061198b60008301856111ea565b61199860208301846116d9565b9392505050565b60008115159050919050565b6119b48161199f565b81146119bf57600080fd5b50565b6000815190506119d1816119ab565b92915050565b6000602082840312156119ed576119ec611032565b5b60006119fb848285016119c2565b91505092915050565b7f466c6173684c6f616e50726f76696465723a204e6f74207661756c7400000000600082015250565b6000611a3a601c836115f0565b9150611a4582611a04565b602082019050919050565b60006020820190508181036000830152611a6981611a2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaa826110ff565b9150611ab5836110ff565b9250828201905080821115611acd57611acc611a70565b5b92915050565b6000611ade826110a1565b9050919050565b611aee81611ad3565b8114611af957600080fd5b50565b600081519050611b0b81611ae5565b92915050565b600067ffffffffffffffff821115611b2c57611b2b611225565b5b602082029050602081019050919050565b60005b83811015611b5b578082015181840152602081019050611b40565b60008484015250505050565b6000611b7a611b7584611469565b611285565b905082815260208101848484011115611b9657611b95611464565b5b611ba1848285611b3d565b509392505050565b600082601f830112611bbe57611bbd61103c565b5b8151611bce848260208601611b67565b91505092915050565b6000611bea611be584611b11565b611285565b90508083825260208201905060208402830185811115611c0d57611c0c611046565b5b835b81811015611c5457805167ffffffffffffffff811115611c3257611c3161103c565b5b808601611c3f8982611ba9565b85526020850194505050602081019050611c0f565b5050509392505050565b600082601f830112611c7357611c7261103c565b5b8151611c83848260208601611bd7565b91505092915050565b60008060408385031215611ca357611ca2611032565b5b6000611cb185828601611afc565b925050602083015167ffffffffffffffff811115611cd257611cd1611037565b5b611cde85828601611c5e565b9150509250929050565b7f417262697472616765206e6f742070726f66697461626c650000000000000000600082015250565b6000611d1e6018836115f0565b9150611d2982611ce8565b602082019050919050565b60006020820190508181036000830152611d4d81611d11565b9050919050565b6000611d5f826110ff565b9150611d6a836110ff565b9250828203905081811115611d8257611d81611a70565b5b92915050565b6000604082019050611d9d60008301856116d9565b611daa60208301846116d9565b9392505050565b6000819050919050565b6000611dd6611dd1611dcc846110a1565b611db1565b6110a1565b9050919050565b6000611de882611dbb565b9050919050565b6000611dfa82611ddd565b9050919050565b611e0a81611def565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611e4782611ddd565b9050919050565b611e5781611e3c565b82525050565b6000611e698383611e4e565b60208301905092915050565b6000602082019050919050565b6000611e8d82611e10565b611e978185611e1b565b9350611ea283611e2c565b8060005b83811015611ed3578151611eba8882611e5d565b9750611ec583611e75565b925050600181019050611ea6565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f15816110ff565b82525050565b6000611f278383611f0c565b60208301905092915050565b6000602082019050919050565b6000611f4b82611ee0565b611f558185611eeb565b9350611f6083611efc565b8060005b83811015611f91578151611f788882611f1b565b9750611f8383611f33565b925050600181019050611f64565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000611fc582611f9e565b611fcf8185611fa9565b9350611fdf818560208601611b3d565b611fe881611214565b840191505092915050565b60006080820190506120086000830187611e01565b818103602083015261201a8186611e82565b9050818103604083015261202e8185611f40565b905081810360608301526120428184611fba565b905095945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612083601f836115f0565b915061208e8261204d565b602082019050919050565b600060208201905081810360008301526120b281612076565b9050919050565b600080604083850312156120d0576120cf611032565b5b60006120de858286016118c8565b925050602083015167ffffffffffffffff8111156120ff576120fe611037565b5b61210b85828601611ba9565b9150509250929050565b600061212082611f9e565b61212a818561174d565b935061213a818560208601611b3d565b61214381611214565b840191505092915050565b612157816110c1565b82525050565b600060a083016000830151848203600086015261217a8282612115565b915050602083015161218f602086018261214e565b5060408301516121a26040860182611f0c565b5060608301516121b56060860182611f0c565b5060808301516121c86080860182611f0c565b508091505092915050565b600060208201905081810360008301526121ed818461215d565b905092915050565b600062ffffff82169050919050565b61220d816121f5565b82525050565b61221c816110a1565b82525050565b61010082016000820151612239600085018261214e565b50602082015161224c602085018261214e565b50604082015161225f6040850182612204565b506060820151612272606085018261214e565b5060808201516122856080850182611f0c565b5060a082015161229860a0850182611f0c565b5060c08201516122ab60c0850182611f0c565b5060e08201516122be60e0850182612213565b50505050565b6000610100820190506122da6000830184612222565b92915050565b600081905092915050565b60006122f682611f9e565b61230081856122e0565b9350612310818560208601611b3d565b80840191505092915050565b600061232882846122eb565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b60006123696002836115f0565b915061237482612333565b602082019050919050565b600060208201905081810360008301526123988161235c565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006123d56002836115f0565b91506123e08261239f565b602082019050919050565b60006020820190508181036000830152612404816123c8565b905091905056fea2646970667358221220c0e528e96bc8d2f8cf2b859f894cfc70d3504346c073e694975048b2c2baf36e64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80635785319d1461004f57806389476069146100785780638da5cb5b146100a1578063f04f2707146100cc5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611135565b6100f5565b005b34801561008457600080fd5b5061009f600480360381019061009a91906111bd565b610376565b005b3480156100ad57600080fd5b506100b661056c565b6040516100c391906111f9565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190611519565b610592565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017c9061164d565b60405180910390fd5b600081116101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf906116b9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f19d7ac84096fd884c7ff689fa448c14cc2b828df6c74eff60c4173de059fea468360405161022591906116e8565b60405180910390a36000600167ffffffffffffffff81111561024a57610249611225565b5b6040519080825280602002602001820160405280156102785781602001602082028036833780820191505090505b50905083816000815181106102905761028f611703565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156102e7576102e6611225565b5b6040519080825280602002602001820160405280156103155781602001602082028036833780820191505090505b509050828160008151811061032d5761032c611703565b5b602002602001018181525050600084888860405160200161035093929190611896565b604051602081830303815290604052905061036c838383610780565b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd9061164d565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161044191906111f9565b602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048291906118dd565b9050600081116104c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104be90611956565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610524929190611976565b6020604051808303816000875af1158015610543573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056791906119d7565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90611a50565b60405180910390fd5b60005b84518110156107795761067a85828151811061063657610635611703565b5b602002602001015185838151811061065157610650611703565b5b602002602001015185848151811061066c5761066b611703565b5b602002602001015185610861565b600083828151811061068f5761068e611703565b5b60200260200101518583815181106106aa576106a9611703565b5b60200260200101516106bc9190611a9f565b90508582815181106106d1576106d0611703565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8836040518363ffffffff1660e01b8152600401610727929190611976565b6020604051808303816000875af1158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a91906119d7565b50508080600101915050610617565b5050505050565b6000835167ffffffffffffffff81111561079d5761079c611225565b5b6040519080825280602002602001820160405280156107cb5781602001602082028036833780820191505090505b50905060005b845181101561084f578481815181106107ed576107ec611703565b5b602002602001015182828151811061080857610807611703565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506107d1565b5061085b81848461099a565b50505050565b610869610a24565b600080828060200190518101906108809190611c8c565b9150915060006108908288610a73565b9050600061089f848984610bf4565b90508681116108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90611d34565b60405180910390fd5b600087826108f19190611d54565b905061092089600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610d74565b8473ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f904ae207ac2ad187558223683996c4334fd731418301729349e3cbbad5cb9f588a8460405161097f929190611d88565b60405180910390a35050505050610994610ec9565b50505050565b73ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff16635c38449e308585856040518563ffffffff1660e01b81526004016109ed9493929190611ff3565b600060405180830381600087803b158015610a0757600080fd5b505af1158015610a1b573d6000803e3d6000fd5b50505050505050565b600260005403610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090612099565b60405180910390fd5b6002600081905550565b600080600090505b8351811015610bed57600080858381518110610a9a57610a99611703565b5b6020026020010151806020019051810190610ab591906120b9565b91509150610ad98573e592427a0aece92de3edee1f18e0157c058615646000610ed3565b610af88573e592427a0aece92de3edee1f18e0157c0586156484610ed3565b73e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663c04b8d596040518060a001604052808481526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603c42610b629190611a9f565b815260200185815260200160008152506040518263ffffffff1660e01b8152600401610b8e91906121d3565b6020604051808303816000875af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd191906118dd565b84610bdc9190611a9f565b935082806001019350505050610a7b565b5092915050565b6000610c1684731b81d678ffb9c0263b24a97847620c99d213eb146000610ed3565b610c3584731b81d678ffb9c0263b24a97847620c99d213eb1484610ed3565b731b81d678ffb9c0263b24a97847620c99d213eb1473ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016101f462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603c42610cdf9190611a9f565b815260200185815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610d2891906122c4565b6020604051808303816000875af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b91906118dd565b90509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610da9929190611976565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e13919061231c565b6000604051808303816000865af19150503d8060008114610e50576040519150601f19603f3d011682016040523d82523d6000602084013e610e55565b606091505b5091509150818015610e835750600081511480610e82575080806020019051810190610e8191906119d7565b5b5b610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb99061237f565b60405180910390fd5b5050505050565b6001600081905550565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610f08929190611976565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f72919061231c565b6000604051808303816000865af19150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fe25750600081511480610fe1575080806020019051810190610fe091906119d7565b5b5b611021576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611018906123eb565b60405180910390fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126110615761106061103c565b5b8235905067ffffffffffffffff81111561107e5761107d611041565b5b60208301915083602082028301111561109a57611099611046565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110cc826110a1565b9050919050565b6110dc816110c1565b81146110e757600080fd5b50565b6000813590506110f9816110d3565b92915050565b6000819050919050565b611112816110ff565b811461111d57600080fd5b50565b60008135905061112f81611109565b92915050565b60008060008060006080868803121561115157611150611032565b5b600086013567ffffffffffffffff81111561116f5761116e611037565b5b61117b8882890161104b565b9550955050602061118e888289016110ea565b935050604061119f888289016110ea565b92505060606111b088828901611120565b9150509295509295909350565b6000602082840312156111d3576111d2611032565b5b60006111e1848285016110ea565b91505092915050565b6111f3816110c1565b82525050565b600060208201905061120e60008301846111ea565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61125d82611214565b810181811067ffffffffffffffff8211171561127c5761127b611225565b5b80604052505050565b600061128f611028565b905061129b8282611254565b919050565b600067ffffffffffffffff8211156112bb576112ba611225565b5b602082029050602081019050919050565b60006112d7826110c1565b9050919050565b6112e7816112cc565b81146112f257600080fd5b50565b600081359050611304816112de565b92915050565b600061131d611318846112a0565b611285565b905080838252602082019050602084028301858111156113405761133f611046565b5b835b81811015611369578061135588826112f5565b845260208401935050602081019050611342565b5050509392505050565b600082601f8301126113885761138761103c565b5b813561139884826020860161130a565b91505092915050565b600067ffffffffffffffff8211156113bc576113bb611225565b5b602082029050602081019050919050565b60006113e06113db846113a1565b611285565b9050808382526020820190506020840283018581111561140357611402611046565b5b835b8181101561142c57806114188882611120565b845260208401935050602081019050611405565b5050509392505050565b600082601f83011261144b5761144a61103c565b5b813561145b8482602086016113cd565b91505092915050565b600080fd5b600067ffffffffffffffff82111561148457611483611225565b5b61148d82611214565b9050602081019050919050565b82818337600083830152505050565b60006114bc6114b784611469565b611285565b9050828152602081018484840111156114d8576114d7611464565b5b6114e384828561149a565b509392505050565b600082601f830112611500576114ff61103c565b5b81356115108482602086016114a9565b91505092915050565b6000806000806080858703121561153357611532611032565b5b600085013567ffffffffffffffff81111561155157611550611037565b5b61155d87828801611373565b945050602085013567ffffffffffffffff81111561157e5761157d611037565b5b61158a87828801611436565b935050604085013567ffffffffffffffff8111156115ab576115aa611037565b5b6115b787828801611436565b925050606085013567ffffffffffffffff8111156115d8576115d7611037565b5b6115e4878288016114eb565b91505092959194509250565b600082825260208201905092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006116376009836115f0565b915061164282611601565b602082019050919050565b600060208201905081810360008301526116668161162a565b9050919050565b7f416d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b60006116a36012836115f0565b91506116ae8261166d565b602082019050919050565b600060208201905081810360008301526116d281611696565b9050919050565b6116e2816110ff565b82525050565b60006020820190506116fd60008301846116d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b600061176a838561174d565b935061177783858461149a565b61178083611214565b840190509392505050565b600061179884848461175e565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117cd576117cc6117ab565b5b83810192508235915060208301925067ffffffffffffffff8211156117f5576117f46117a1565b5b60018202360383131561180b5761180a6117a6565b5b509250929050565b6000602082019050919050565b600061182c8385611732565b93508360208402850161183e84611743565b8060005b8781101561188457848403895261185982846117b0565b61186486828461178b565b955061186f84611813565b935060208b019a505050600181019050611842565b50829750879450505050509392505050565b60006040820190506118ab60008301866111ea565b81810360208301526118be818486611820565b9050949350505050565b6000815190506118d781611109565b92915050565b6000602082840312156118f3576118f2611032565b5b6000611901848285016118c8565b91505092915050565b7f4e6f20746f6b656e2062616c616e636500000000000000000000000000000000600082015250565b60006119406010836115f0565b915061194b8261190a565b602082019050919050565b6000602082019050818103600083015261196f81611933565b9050919050565b600060408201905061198b60008301856111ea565b61199860208301846116d9565b9392505050565b60008115159050919050565b6119b48161199f565b81146119bf57600080fd5b50565b6000815190506119d1816119ab565b92915050565b6000602082840312156119ed576119ec611032565b5b60006119fb848285016119c2565b91505092915050565b7f466c6173684c6f616e50726f76696465723a204e6f74207661756c7400000000600082015250565b6000611a3a601c836115f0565b9150611a4582611a04565b602082019050919050565b60006020820190508181036000830152611a6981611a2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaa826110ff565b9150611ab5836110ff565b9250828201905080821115611acd57611acc611a70565b5b92915050565b6000611ade826110a1565b9050919050565b611aee81611ad3565b8114611af957600080fd5b50565b600081519050611b0b81611ae5565b92915050565b600067ffffffffffffffff821115611b2c57611b2b611225565b5b602082029050602081019050919050565b60005b83811015611b5b578082015181840152602081019050611b40565b60008484015250505050565b6000611b7a611b7584611469565b611285565b905082815260208101848484011115611b9657611b95611464565b5b611ba1848285611b3d565b509392505050565b600082601f830112611bbe57611bbd61103c565b5b8151611bce848260208601611b67565b91505092915050565b6000611bea611be584611b11565b611285565b90508083825260208201905060208402830185811115611c0d57611c0c611046565b5b835b81811015611c5457805167ffffffffffffffff811115611c3257611c3161103c565b5b808601611c3f8982611ba9565b85526020850194505050602081019050611c0f565b5050509392505050565b600082601f830112611c7357611c7261103c565b5b8151611c83848260208601611bd7565b91505092915050565b60008060408385031215611ca357611ca2611032565b5b6000611cb185828601611afc565b925050602083015167ffffffffffffffff811115611cd257611cd1611037565b5b611cde85828601611c5e565b9150509250929050565b7f417262697472616765206e6f742070726f66697461626c650000000000000000600082015250565b6000611d1e6018836115f0565b9150611d2982611ce8565b602082019050919050565b60006020820190508181036000830152611d4d81611d11565b9050919050565b6000611d5f826110ff565b9150611d6a836110ff565b9250828203905081811115611d8257611d81611a70565b5b92915050565b6000604082019050611d9d60008301856116d9565b611daa60208301846116d9565b9392505050565b6000819050919050565b6000611dd6611dd1611dcc846110a1565b611db1565b6110a1565b9050919050565b6000611de882611dbb565b9050919050565b6000611dfa82611ddd565b9050919050565b611e0a81611def565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611e4782611ddd565b9050919050565b611e5781611e3c565b82525050565b6000611e698383611e4e565b60208301905092915050565b6000602082019050919050565b6000611e8d82611e10565b611e978185611e1b565b9350611ea283611e2c565b8060005b83811015611ed3578151611eba8882611e5d565b9750611ec583611e75565b925050600181019050611ea6565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f15816110ff565b82525050565b6000611f278383611f0c565b60208301905092915050565b6000602082019050919050565b6000611f4b82611ee0565b611f558185611eeb565b9350611f6083611efc565b8060005b83811015611f91578151611f788882611f1b565b9750611f8383611f33565b925050600181019050611f64565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000611fc582611f9e565b611fcf8185611fa9565b9350611fdf818560208601611b3d565b611fe881611214565b840191505092915050565b60006080820190506120086000830187611e01565b818103602083015261201a8186611e82565b9050818103604083015261202e8185611f40565b905081810360608301526120428184611fba565b905095945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612083601f836115f0565b915061208e8261204d565b602082019050919050565b600060208201905081810360008301526120b281612076565b9050919050565b600080604083850312156120d0576120cf611032565b5b60006120de858286016118c8565b925050602083015167ffffffffffffffff8111156120ff576120fe611037565b5b61210b85828601611ba9565b9150509250929050565b600061212082611f9e565b61212a818561174d565b935061213a818560208601611b3d565b61214381611214565b840191505092915050565b612157816110c1565b82525050565b600060a083016000830151848203600086015261217a8282612115565b915050602083015161218f602086018261214e565b5060408301516121a26040860182611f0c565b5060608301516121b56060860182611f0c565b5060808301516121c86080860182611f0c565b508091505092915050565b600060208201905081810360008301526121ed818461215d565b905092915050565b600062ffffff82169050919050565b61220d816121f5565b82525050565b61221c816110a1565b82525050565b61010082016000820151612239600085018261214e565b50602082015161224c602085018261214e565b50604082015161225f6040850182612204565b506060820151612272606085018261214e565b5060808201516122856080850182611f0c565b5060a082015161229860a0850182611f0c565b5060c08201516122ab60c0850182611f0c565b5060e08201516122be60e0850182612213565b50505050565b6000610100820190506122da6000830184612222565b92915050565b600081905092915050565b60006122f682611f9e565b61230081856122e0565b9350612310818560208601611b3d565b80840191505092915050565b600061232882846122eb565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b60006123696002836115f0565b915061237482612333565b602082019050919050565b600060208201905081810360008301526123988161235c565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006123d56002836115f0565b91506123e08261239f565b602082019050919050565b60006020820190508181036000830152612404816123c8565b905091905056fea2646970667358221220c0e528e96bc8d2f8cf2b859f894cfc70d3504346c073e694975048b2c2baf36e64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
        "details": "When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ArbitrageCompleted(address,address,uint256,uint256)": {
        "notice": "Emitted when an arbitrage completes successfully"
      },
      "ArbitrageStarted(address,address,uint256)": {
        "notice": "Emitted when an arbitrage is initiated"
      }
    },
    "kind": "user",
    "methods": {
      "arbitrageDexes(bytes[],address,address,uint256)": {
        "notice": "Perform arbitrage between Uniswap V3 and PancakeSwap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 777,
        "contract": "contracts/arbitrum/ArbitrageV2.sol:ArbitrageV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1206,
        "contract": "contracts/arbitrum/ArbitrageV2.sol:ArbitrageV2",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}